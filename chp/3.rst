第三章：Defining Types, Streamlining Functions
=================================================

定义新的数据类型
-------------------

尽管列表和元组都非常有用，但是，定义新的数据类型也是一种常见的需求，这种能力使得我们可以为程序中的值添加结构。

而且比起使用元组，对一簇相关的值赋予一个名字和一个独一无二的类型显得更有用一些。

定义新的数据类型也提升了代码的安全性：Haskell 不会允许我们混用两个结构相同但类型不同的值。

本章将以一个在线书店为例子，展示如何去进行类型定义。

使用 ``data`` 关键字可以定义新的数据类型：

::

    -- file: ch03/BookStore.hs
    data BookInfo = Book Int String [String]
                    deriving (Show)


跟在 ``data`` 关键字之后的 ``BookInfo`` 就是新类型的名字，我们称 ``BookInfo`` 为\ *类型构造器*\ 。类型构造器用于指代（refer）类型。正如前面提到过的，类型名字的首字母必须大写，因此，类型构造器的首字母也必须大写。

接下来的 ``Book`` 是\ *值构造器*\ （有时候也称为数据构造器）的名字。类型的值就是由值构造器创建的。值构造器名字的首字母也必须大写。

在 ``Book`` 之后的 ``Int`` ， ``String`` 和 ``[String]`` 是类型的\ *组成部分*\ 。组成部分的作用，和面向对象语言的类中的域作用一致：它是一个储存值的槽。（为了方便起见，我们通常也将组成部分称为域。）

在这个例子中， ``Int`` 表示一本书的 ID ，而 ``String`` 表示书名，而 ``[String]`` 则代表作者。

``BookInfo`` 类型包含的成分和一个 ``(Int, String, [String])`` 类型的三元组一样，它们唯一不相同的是类型。[译注：这里指的是整个值的类型，不是成分的类型。]我们不能混用结构相同但类型不同的值。

举个例子，以下的 ``MagzineInfo`` 类型的成分和 ``BookInfo`` 一模一样，但 Haskell 会将它们作为不同的类型来区别对待，因为它们的类型构构造器和值构造器并不相同：

::

    -- file: ch03/BookStore.hs
    data MagzineInfo = Magzine Int String [String]
                       deriving (Show)

可以将值构造器看作是一个函数 —— 它创建并返回某个类型值。在这个书店的例子里，我们将 ``Int`` 、 ``String`` 和 ``[String]`` 三个类型的值应用到 ``Book`` ，从而创建一个 ``BookInfo`` 类型的值：


::

    -- file: ch03/BookStore.hs
    myInfo = Book 9780135072455 "Algebra of Programming"
                  ["Richard Bird", "Oege de Moor"]


定义类型的工作完成之后，可以到 ghci 里载入并测试这些新类型：

::

    Prelude> :load BookStore.hs
    [1 of 1] Compiling Main             ( BookStore.hs, interpreted )
    Ok, modules loaded: Main.

再看看前面在文件里定义的 ``myInfo`` 变量：

::

    *Main> myInfo
    Book 494539463 "Algebra of Programming" ["Richard Bird","Oege de Moor"]

在 ghci 里面当然也可以创建新的 ``BookInfo`` 值：

::

    *Main> Book 0 "The Book of Imaginary Beings" ["Jorge Luis Borges"]
    Book 0 "The Book of Imaginary Beings" ["Jorge Luis Borges"]

可以用 ``:type`` 命令来查看表达式的值：

::

    *Main> :type Book 1 "Cosmicomics" ["Italo Calvino"]
    Book 1 "Cosmicomics" ["Italo Calvino"] :: BookInfo

请记住，在 ghci 里定义变量的语法和在源码文件里定义变量的语法并不相同。在 ghci 里，变量通过 ``let`` 定义：

::

    *Main> let cities = Book 173 "Use of Weapons" ["Iain M. Banks"]

使用 ``:info`` 命令可以查看更多关于给定表达式的信息：

::

    *Main> :info BookInfo
    data BookInfo = Book Int String [String]
        -- Defined at BookStore.hs:2:6
        instance Show BookInfo -- Defined at BookStore.hs:3:27

使用 ``:type`` 命令，可以查看值构造器 ``Book`` 的类型签名，了解它是如何创建出 ``BookInfo`` 类型的值的：

::

    *Main> :type Book
    Book :: Int -> String -> [String] -> BookInfo


类型构造器和值构造器的命名
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在前面介绍 ``BookInfo`` 类型的时候，我们专门为类型构造器和值构造器设置了不同的名字（ ``BookInfo`` 和 ``Book`` ），这样区分起来比较容易。

在 Haskell 里，类型的名字（类型构造器）和值构造器的名字是相互独立的。类型构造器只能出现在类型的定义，或者类型签名当中。而值构造器只能出现在实际的代码中。因为存在这种差别，给类型构造器和值构造器赋予一个相同的名字实际上并不会产生任何问题。

以下是这种用法的一个例子：

::

    -- file: ch03/BookStore.hs
    -- 稍后就会介绍 CustomerID 的定义

    data BookReview = BookReview BookInfo CustomerID String

以上代码定义了一个 ``BookReview`` 类型，并且它的值构造器的名字也同样是 ``BookReview`` 。


类型别名
-----------

可以使用\ *类型别名*\ ，来为一个已存在的类型设置一个更具描述性的名字。

比如说，在前面 ``BookReview`` 类型的定义里，并没有说明 ``String`` 成分是干什么用的，通过类型别名，可以解决这个问题：

::

    -- file: ch03/BookStore.hs
    type CustomerID = Int 
    type ReviewBody = String

    data BetterReview = BetterReview BookInfo CustomerID ReviewBody

``type`` 关键字用于设置类型别名，其中新的类型名字放在 ``=`` 号的左边，而已有的类型名字放在 ``=`` 号的右边。这两个名字都标识同一个类型，因此，类型别名\ *完全是*\ 为了提高可读性而存在的。

类型别名也可以用来为啰嗦的类型设置一个更短的名字：

::

    -- file: ch03/BookStore.hs
    type BookRecord = (BookInfo, BookReview)
   
需要注意的是，类型别名只是为已有类型提供了一个新名字，创建值的工作还是由原来类型的值构造器进行。[注：如果你熟悉 C 或者 C++ ，可以将 Haskell 的类型别名看作是 ``typedef`` 。]


代数数据类型
------------------------

``Bool`` 类型是\ *代数数据类型*\ （algebraic data type）的最简单也是最常见的例子。一个代数类型可以有多于一个值构造器：

.. literalinclude:: /code/ch03/Bool.hs

上面代码定义的 ``Bool`` 类型拥有两个值构造器，一个是 ``True`` ，另一个是 ``False`` 。每个值构造器使用 ``|`` 符号分割，读作“或者” —— 以 ``Bool`` 类型为例子，我们可以说， ``Bool`` 类型由 ``True`` 值或者 ``False`` 值构成。

当一个类型拥有一个以上的值构造器时，这些值构造器通常被称为“备选”（alternatives）或“分支”（case）。同一类型的所有备选，创建出的的值的类型都是相同的。

代数数据类型的各个值构造器都可以接受任意个数的参数。[译注：不同备选之间接受的参数个数不必相同，参数的类型也可以不一样。]以下是一个账单数据的例子：

::

    -- file: ch03/BookStore.hs
    type CardHolder = String
    type CardNumber = String
    type Address = [String]
    data BillingInfo = CreditCard CardNumber CardHolder Address
                     | CashOnDelivery
                     | Invoice CustomerID
                       deriving (Show)

这个程序提供了三种付款的方式。如果使用信用卡付款，就要使用 ``CreditCard`` 作为值构造器，并输入信用卡密码、信用卡持有人和地址作为参数。如果即时支付现金，就不用接受任何参数。最后，可以通过货到付款的方式来收款，在这种情况下，只需要填写客户的 ID 就可以了。

当使用值构造器来创建 ``BillingInfo`` 类型的值时，必须提供这个值构造器所需的参数：

::

    Prelude> :load BookStore.hs
    [1 of 1] Compiling Main             ( BookStore.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> :type CreditCard
    CreditCard :: CardNumber -> CardHolder -> Address -> BillingInfo

    *Main> CreditCard "2901650221064486" "Thomas Gradgrind" ["Dickens", "England"]
    CreditCard "2901650221064486" "Thomas Gradgrind" ["Dickens","England"]

    *Main> :type it
    it :: BillingInfo

如果输入参数的类型不对或者数量不对，那么引发一个错误：

::

    *Main> Invoice

    <interactive>:7:1:
        No instance for (Show (CustomerID -> BillingInfo))
            arising from a use of `print'
        Possible fix:
            add an instance declaration for (Show (CustomerID -> BillingInfo))
        In a stmt of an interactive GHCi command: print it

ghci 抱怨我们没有给 ``Invoice`` 值构造器足够的参数。

[译注：原文这里的代码示例有错，译文已改正。]


什么情况下该用元组，而什么情况下又该用代数数据类型？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

元组和自定域代数数据类型有一些相似的地方。比如说，可以使用一个 ``(Int, String, [String])`` 类型的元组来代替 ``BookInfo`` 类型：

::

    *Main> Book 2 "The Wealth of Networks" ["Yochai Benkler"]
    Book 2 "The Wealth of Networks" ["Yochai Benkler"]

    *Main> (2, "The Wealth of Networks", ["Yochai Benkler"])
    (2,"The Wealth of Networks",["Yochai Benkler"])

代数数据类型使得我们可以在结构相同但类型不同的数据之间进行区分。然而，对于元组来说，只要元素的结构和类型都一致，那么元组的类型就是相同的：

::

    -- file: ch03/Distinction.hs
    a = ("Porpoise", "Grey")
    b = ("Table", "Oak")

其中 ``a`` 和 ``b`` 的类型相同：

::

    Prelude> :load Distinction.hs
    [1 of 1] Compiling Main             ( Distinction.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> :type a
    a :: ([Char], [Char])

    *Main> :type b
    b :: ([Char], [Char])

对于两个不同的代数数据类型来说，即使值构造器成分的结构和类型都相同，它们也是不同的类型：

::

    -- file: ch03/Distinction.hs
    data Cetacean = Cetacean String String
    data Furniture = Furniture String String

    c = Cetacean "Porpoise" "Grey"
    d = Furniture "Table" "Oak"

其中 ``c`` 和 ``d`` 的类型并不相同：

::

    Prelude> :load Distinction.hs
    [1 of 1] Compiling Main             ( Distinction.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> :type c
    c :: Cetacean

    *Main> :type d
    d :: Furniture

以下是一个更细致的例子，它用两种不同的方式表示二维向量：

.. literalinclude:: /code/ch03/AlgebraicVector.hs

``Cartesian2D`` 和 ``Polar2D`` 两种类型的成分都是 ``Double`` 类型，但是，这些成分表达的是不同的\ *意思*\ 。因为 ``Cartesian2D`` 和 ``Polar2D`` 是不同的类型，因此 Haskell 不会允许混淆使用这两种类型：

::

    Prelude> :load AlgebraicVector.hs
    [1 of 1] Compiling Main             ( AlgebraicVector.hs, interpreted )
    Ok, modules loaded: Main.
    *Main> Cartesian2D (sqrt 2) (sqrt 2) == Polar2D (pi / 4) 2

    <interactive>:3:34:
        Couldn't match expected type `Cartesian2D'
    with actual type `Polar2D'
        In the return type of a call of `Polar2D'
    In the second argument of `(==)', namely `Polar2D (pi / 4) 2'
    In the expression:
        Cartesian2D (sqrt 2) (sqrt 2) == Polar2D (pi / 4) 2

错误信息显示， ``(==)`` 操作符只接受类型相同的值作为它的参数，在类型签名里也可以看出这一点：

::

    *Main> :type (==)
    (==) :: Eq a => a -> a -> Bool

另一方面，如果使用类型为 ``(Double, Double)`` 的元组来表示二维向量的两种表示方式，那么我们就有麻烦了：

::

    Prelude> -- 第一个元组使用 Cartesian 表示，第二个元组使用 Polar 表示
    Prelude> (1, 2) == (1, 2)   
    True

类型系统不会察觉到，我们正错误地对比两种不同表示方式的值，因为对两个类型相同的元组进行对比是完全合法的！

关于该使用元组还是该使用代数数据类型，没有一劳永逸的办法。但是，有一个经验法则可以参考：如果程序大量使用复合数据，那么使用 ``data`` 进行类型自定义对于类型安全和可读性都有好处。而对于小规模的内部应用，那么通常使用元组就足够了。


其他语言里类似代数数据类型的东西
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

代数数据类型为描述数据类型提供了一种单一且强大的方式。很多其他语言，要达到相当于代数数据类型的表达能力，需要同时使用多种特性。

以下是一些 C 和 C++ 方面的例子，说明怎样在这些语言里，怎么样实现类似于代数数据类型的功能。

结构
""""""

当只有一个值构造器时，代数数据类型和元组很相似：它将一系列相关的值打包成一个复合值。这种做法相当于 C 和 C++ 里的 ``struct`` ，而代数数据类型的成分则相当于 ``struct`` 里的域。

以下是一个 C 结构，它等同于我们前面定义的 ``BookInfo`` 类型：

.. code-block:: c

    struct book_info {
        int id;
        char *name;
        char **authors;
    };

目前来说， C 结构和 Haskell 的代数数据类型最大的差别是，代数数据类型的成分是匿名且按位置排序的：

::

    --file: ch03/BookStore.hs
    data BookInfo = Book Int String [String]
                    deriving (Show)

按位置排序指的是，对成分的访问是通过位置来实行的，而不是像 C 那样，通过名字：比如 ``book_info->id`` 。

稍后的“模式匹配”小节会介绍如何访代数数据类型里的成分。在“记录”一节会介绍定义数据的新语法，通过这种语法，可以像 C 结构那样，使用名字来访问相应的成分。


枚举
"""""""

C 和 C++ 里的 ``enum`` 通常用于表示一系列符号值排列。代数数据类型里面也有相似的东西，一般称之为\ *枚举类型*\ 。

以下是一个 ``enum`` 例子：

.. code-block:: c

    enum roygbiv {
        red,
        orange,
        yellow,
        green,
        blue,
        indigo,
        violet,
    };

以下是等价的 Haskell 代码：

.. literalinclude:: /code/ch03/Roygbiv.hs

在 ghci 里面测试：

::

    Prelude> :load Roygbiv.hs
    [1 of 1] Compiling Main             ( Roygbiv.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> :type Yellow
    Yellow :: Roygbiv

    *Main> :type Red
    Red :: Roygbiv

    *Main> Red == Yellow
    False

    *Main> Green == Green
    True

``enum`` 的问题是，它使用整数值去代表元素：在一些接受 ``enum`` 的场景里，可以将整数传进去，C 编译器会自动进行类型转换。同样，在使用整数的场景里，也可以将一个 ``enum`` 元素传进去。这种用法可能会造成一些令人不爽的 bug 。

另一方面，在 Haskell 里就没有这样的问题。比如说，不可能使用 ``Roygbiv`` 里的某个值来代替 ``Int`` 值[译注：因为枚举类型的每个元素都由一个唯一的值构造器生成，而不是使用整数表示。]：

::

    *Main> take 3 "foobar"
    "foo"

    *Main> take Red "foobar"

    <interactive>:9:6:
        Couldn't match expected type `Int' with actual type `Roygbiv'
        In the first argument of `take', namely `Red'
        In the expression: take Red "foobar"
        In an equation for `it': it = take Red "foobar"


联合
""""""

如果一个代数数据类型有多个备选，那么可以将它看作是 C 或 C++ 里的 ``union`` 。

以上两者的一个主要区别是， ``union`` 并不告诉用户，当前使用的是哪一个备选， ``union`` 的使用者必须自己记录这方面的信息（通常使用一个额外的域来保存），这意味着，如果搞错了备选的信息，那么对 ``union`` 的使用就会出错。

以下是一个 ``union`` 例子：

.. code-block:: c

    enum shape_type {
        shape_circle,
        shape_poly,
    };

    struct circle {
        struct vector centre;
        float radius;
    };

    struct poly {
        size_t num_vertices;
        struct vector *vertices;
    };

    struct shape
    {
        enum shape_type type;
        union {
        struct circle circle;
        struct poly poly;
        } shape;
    };

在上面的代码里， ``shape`` 域的值可以是一个 ``circle`` 结构，也可以是一个 ``poly`` 结构。 ``shape_type`` 用于记录目前 ``shape`` 正在使用的结构类型。

另一方面，Haskell 版本不仅简单，而且更为安全：

.. literalinclude:: /code/ch03/ShapeUnion.hs

[译注：原文的代码少了 ``deriving (Show)`` 一行，在 ghci 测试时会出错。]

注意，我们不必像 C 语言那样，使用 ``shape_type`` 域来手动记录 ``Shape`` 类型的值是由 ``Circle`` 构造器生成的，还是由 ``Poly`` 构造器生成， Haskell 自己有办法弄清楚一点，它不会弄混两种不同的值。其中的原因，下一节《模式匹配》就会讲到。

[译注：原文这里将 ``Poly`` 写成了 ``Square`` 。]

模式匹配
----------------------

前面的章节介绍了代数数据类型的定义方法，本节将说明怎样去处理这些类型的值。

对于某个类型的值来说，应该可以做到以下两点：

* 如果这个类型有一个以上的值构造器，那么应该可以知道，这个值是由哪个构造器创建的。

* 如果一个值构造器包含不同的成分，那么应该有办法提取这些成分。

对于以上两个问题， Haskell 有一个简单且有效的解决方式，那就是\ *类型匹配*\ 。

模式匹配允许我们查看值的内部，并将值所包含的数据绑定到变量上。以下是一个对 ``Bool`` 类型值进行模式匹配的例子，它的作用和 ``not`` 函数一样：

.. literalinclude:: /code/ch03/myNot.hs

[译注：原文的文件名为 ``add.hs`` ，这里修改成 ``myNot.hs`` ，和函数名保持一致。]

初看上去，代码似乎同时定义了两个 ``myNot`` 函数，但实际情况并不是这样 —— Haskell 允许将函数定义为\ *一系列等式*\ ： ``myNot`` 的两个等式分别定义了函数对于输入参数在不同模式之下的行为。对于每行等式，模式定义放在函数名之后， ``=`` 符号之前。

为了理解模式匹配是如何工作的，来研究一下 ``myNot False`` 是如何执行的：首先调用 ``myNot`` ， Haskell 运行时检查输入参数 ``False`` 是否和第一个模式的值构造器匹配 —— 答案是不匹配，于是它继续尝试匹配第二个模式 —— 这次匹配成功了，于是第二个等式右边的值被作为结果返回。

以下是一个复杂一点的例子，这个函数计算出列表所有元素之和：

.. literalinclude:: /code/ch03/sumList.hs

[译注：原文代码的文件名为 ``add.hs`` 这里改为 ``sumList.hs`` ，和函数名保持一致。]

需要说明的一点是，在 Haskell 里，列表 ``[1, 2]`` 实际上只是 ``(1:(2:[]))`` 的一种简单的表示方式，其中 ``(:)`` 用于构造列表：

::

    Prelude> []
    []

    Prelude> 1:[]
    [1]

    Prelude> 1:2:[]
    [1,2]

因此，当需要对一个列表进行匹配时，也可以使用 ``(:)`` 操作符，只不过这次不是用来构造列表，而是用来分解列表。

作为例子，考虑求值 ``sumList [1, 2]`` 时会发生什么：首先， ``[1, 2]`` 尝试对第一个等式的模式 ``(x:xs)`` 进行匹配，结果是模式匹配成功，并将 ``x`` 绑定为 ``1`` ， ``xs`` 绑定为 ``[2]`` 。

计算进行到这一步，表达式就变成了 ``1 + (sumList [2])`` ，于是递归调用 ``sumList`` ，对 ``[2]`` 进行模式匹配。

这一次也是在第一个等式匹配成功，变量 ``x`` 被绑定为 ``2`` ，而 ``xs`` 被绑定为 ``[]`` 。表达式变为 ``1 + (2 + sumList [])`` 。

再次递归调用 ``sumList`` ，输入为 ``[]`` ，这一次，第二个等式的 ``[]`` 模式匹配成功，返回 ``0`` ，整个表达式为 ``1 + (2 + (0))`` ，计算结果为 ``3`` 。

最后要说的一点是，标准函数库里已经有 ``sum`` 函数，它和我们定以的 ``sumList`` 一样，都可以用于计算表元素的和：

::

    Prelude> :load sumList.hs
    [1 of 1] Compiling Main             ( sumList.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> sumList [1, 2]
    3

    *Main> sum [1, 2]
    3


组成和解构
^^^^^^^^^^^^

让我们稍微慢下探索新特性的脚步，花些时间，了解构造一个值、和对这个值进行模式匹配之间的关系。

我们通过应用值构造器来构建值：表达式 ``Book 9 "Close Calls" ["John Long"]`` 应用 ``Book`` 构造器到值 ``9`` 、 ``"Close Calls"`` 和 ``["John Long"]`` 上面，从而产生一个新的 ``BookInfo`` 类型的值。

另一方面，当对 ``Book`` 构造器进行模式匹配时，我们\ *逆转*\ （reverse）它的构造过程：首先，检查这个值是否由 ``Book`` 构造器生成 —— 如果是的话，那么就对这个值进行探查（inspect），并取出创建这个值时，提供给构造器的各个值。

考虑一下表达式 ``Book 9 "Close Calls" ["John Long"]`` 对模式 ``(Book id name authors)`` 的匹配是如何进行的：

* 因为值的构造器和模式里的构造器相同，因此匹配成功。

* 变量 ``id`` 被绑定为 ``9`` 。

* 变量 ``name`` 被绑定为 ``Close Calls`` 。

* 变量 ``authors`` 被绑定为 ``["John Long"]`` 。

因为模式匹配的过程就像是逆转一个值的构造（construction）过程，因此它有时候也被称为\ *解构*\ （deconstruction）。

[译注：上一节的《联合》小节里提到， Haskell 有办法分辨同一类型由不同值构造器创建的值，说的就是模式匹配。

比如 ``Circle ...`` 和 ``Poly ...`` 两个表达式创建的都是 ``Shape`` 类型的值，但第一个表达式只有在匹配 ``(Circle vector double)`` 模式时才会成功，而第二个表达式只有在 ``(Poly vectors)`` 时才会成功。这就是它们不会被混淆的原因。]

更进一步
^^^^^^^^^^^^

对元组进行模式匹配的语法，和构造元组的语法很相似。

以下是一个可以返回三元组中最后一个元素的函数：

.. literalinclude:: /code/ch03/third.hs

[译注：原文的源码文件名为 ``Tuple.hs`` ，这里改为 ``third.hs`` ，和函数的名字保持一致。]

在 ghci 里测试这个函数：

::

    Prelude> :load third.hs
    [1 of 1] Compiling Main             ( third.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> third (1, 2, 3)
    3

模式匹配的“深度”并没有限制。以下模式会同时对元组和元组里的列表进行匹配：

.. literalinclude:: /code/ch03/complicated.hs

[译注：原文的源码文件名为 ``Tuple.hs`` ，这里改为 ``complicated.hs`` ，和函数的名字保持一致。]

在 ghci 里测试这个函数：

::

    Prelude> :load complicated.hs
    [1 of 1] Compiling Main             ( complicated.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> complicated (True, 1, [1, 2, 3], 5)
    (1,[2,3])

对于出现在模式里的字面（literal）值（比如前面元组例子里的 ``True`` 和 ``5`` ），输入里的各个值必须和这些字面值相等，匹配才有可能成功。以下代码显示，因为输入元组和模式的第一个字面值 ``True`` 不匹配，所以匹配失败了：

::

    *Main> complicated (False, 1, [1, 2, 3], 5)
    *** Exception: complicated.hs:2:1-40: Non-exhaustive patterns in function complicated

这个例子也显示了，如果所有给定等式的模式都匹配失败，那么返回一个运行时错误。

对代数数据类型的匹配，可以通过这个类型的值构造器来进行。拿之前我们定义的 ``BookInfo`` 类型为例子，对它的模式匹配可以使用它的 ``Book`` 构造器来进行：

::

    -- file: ch03/BookStore.hs
    bookID      (Book id title authors) = id
    bookTitle   (Book id title authors) = title
    bookAuthors (Book id title authors) = authors

在 ghci 里试试：

::

    Prelude> :load BookStore.hs
    [1 of 1] Compiling Main             ( BookStore.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> let book = (Book 3 "Probability Theory" ["E.T.H. Jaynes"])

    *Main> bookID book
    3

    *Main> bookTitle book
    "Probability Theory"

    *Main> bookAuthors book
    ["E.T.H. Jaynes"]

字面值的比对规则对于列表和值构造器的匹配也适用： ``(3:xs)`` 模式只匹配那些不为空，并且第一个元素为 ``3`` 的列表；而 ``(Book 3 title authors)`` 只匹配 ID 值为 ``3`` 的那本书。


模式匹配中的变量名命名
^^^^^^^^^^^^^^^^^^^^^^^^^

当你阅读那些进行模式匹配的函数时，经常会发现像是 ``(x:xs)`` 或是 ``(d:ds)`` 这种类型的名字。这是一个流行的命名规则，其中的 ``s`` 表示“元素的复数”。以 ``(x:xs)`` 来说，它用 ``x`` 来表示列表的第一个元素，剩余的列表元素则用 ``xs`` 表示。


Parameterized Types
---------------------

Recursive Types
-------------------

Reporting Errors
------------------

Intruducing Local Variables
-------------------------------

The Offside Rule and Whitespace in an Expression
---------------------------------------------------------

The Case Expression
---------------------

Common Beginner Mistakes with Patterns
-----------------------------------------

Conditional Evaluation with Guards
-------------------------------------
